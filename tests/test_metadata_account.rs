use std::thread::sleep;
use std::time::Duration;

use solana_geyser_plugin_interface::geyser_plugin_interface::GeyserPlugin;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfo;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfoVersions;
use solana_geyser_plugin_postgres::geyser_plugin_postgres::GeyserPluginPostgres;
use solana_geyser_plugin_postgres::postgres_client::SimplePostgresClient;
use solana_sdk::pubkey;
use solana_sdk::pubkey::Pubkey;
use solana_sdk::signature::Keypair;
use solana_sdk::signer::Signer;

static OWNER: Pubkey = pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
static TOKEN_ACCOUNT_OWNER: Pubkey = pubkey!("cpmaMZyBQiPxpeuxNsQhW7N8z1o9yaNdLgiPhWGUEiX");
static MINT: Pubkey = pubkey!("DUSTawucrTsGU8hcqRdHDCbuYhCPADMLM2VcCb8VnFnQ");

#[test]
fn test_token_account() {
    let address: Pubkey = Keypair::new().pubkey();
    let mut geyser_plugin = GeyserPluginPostgres::default();
    geyser_plugin.on_load(concat!(env!("CARGO_MANIFEST_DIR"), "/tests/test_config.json")).unwrap();

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address.as_ref(),
                lamports: 2039280,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0x04, 0xf9, 0xf2, 0x90, 0x13, 0x39, 0x08, 0x13, 0x96, 0xad, 0x08, 0x80, 0x14, 0x4e, 0x3a, 0x83, 0x19, 0xa6, 0xd7, 0xb8, 0x8c, 0xb2, 0x91, 0xc6, 0xd6, 0xb8, 0x2e, 0x15, 0x00, 0x4f,
                    0x16, 0xbb, 0xa0, 0x54, 0x4c, 0x5a, 0x4f, 0x82, 0xdf, 0xb4, 0x66, 0xad, 0x10, 0xe2, 0xc0, 0x24, 0xa8, 0x5d, 0x3b, 0xf6, 0x91, 0xe7, 0xc9, 0x6c, 0x44, 0x98, 0x73, 0x7d, 0x87, 0x36,
                    0xf0, 0xd6, 0x04, 0x1d, 0x24, 0x20, 0x00, 0x00, 0x00, 0x4d, 0x69, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x48, 0x65, 0x72, 0x6f, 0x20, 0x23, 0x32, 0x38, 0x34, 0x37, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x4d, 0x49, 0x4e, 0x49, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x2e, 0x6d, 0x72, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x3f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3d, 0x34, 0x38, 0x32, 0x37, 0x31,
                    0x32, 0x39, 0x38, 0x39, 0x34, 0x26, 0x69, 0x64, 0x3d, 0x34, 0x31, 0x33, 0x35, 0x65, 0x34, 0x37, 0x66, 0x64, 0x32, 0x33, 0x35, 0x34, 0x37, 0x63, 0x34, 0x61, 0x32, 0x62, 0x62, 0x34,
                    0x30, 0x66, 0x39, 0x35, 0x63, 0x34, 0x30, 0x64, 0x39, 0x38, 0x64, 0x26, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3d, 0x49, 0x73, 0x56, 0x56, 0x6f, 0x49, 0x5f, 0x45, 0x5f, 0x46, 0x71, 0x58,
                    0x41, 0x6c, 0x69, 0x79, 0x73, 0x37, 0x68, 0x6a, 0x43, 0x45, 0x6e, 0x51, 0x62, 0x32, 0x7a, 0x54, 0x4d, 0x61, 0x64, 0x31, 0x55, 0x4b, 0x6c, 0x36, 0x48, 0x4f, 0x51, 0x43, 0x41, 0x2d,
                    0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0xf9, 0xf2, 0x90, 0x13,
                    0x39, 0x08, 0x13, 0x96, 0xad, 0x08, 0x80, 0x14, 0x4e, 0x3a, 0x83, 0x19, 0xa6, 0xd7, 0xb8, 0x8c, 0xb2, 0x91, 0xc6, 0xd6, 0xb8, 0x2e, 0x15, 0x00, 0x4f, 0x16, 0xbb, 0xa0, 0x01, 0x00,
                    0x09, 0xd8, 0xad, 0x4d, 0xbe, 0x1e, 0x24, 0xc8, 0x4d, 0x0f, 0xab, 0xe1, 0x2f, 0xc8, 0x65, 0x04, 0x7d, 0x21, 0x4b, 0x0d, 0xc9, 0x1e, 0xc7, 0x8b, 0x25, 0xed, 0x7a, 0x34, 0xf7, 0x3d,
                    0xb5, 0x42, 0x00, 0x64, 0x4e, 0xaf, 0xcd, 0xee, 0x22, 0xdc, 0xbb, 0x25, 0x10, 0xc9, 0x6a, 0x9c, 0x65, 0x95, 0xee, 0xe7, 0x77, 0x2e, 0xbe, 0x83, 0xe2, 0x1b, 0x86, 0x58, 0xc7, 0xed,
                    0xc0, 0xa4, 0xd5, 0x78, 0x3c, 0x25, 0x00, 0x00, 0x01, 0x01, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            false,
        )
        .unwrap();

    sleep(Duration::from_secs(1));

    // check token owner
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query("SELECT * from spl_token_account where pubkey=$1", &[&address.to_string()])
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 1, "Incorrect number of rows found");
    let first_row = rows.first().expect("No results found");

    let pubkey: String = first_row.get("pubkey");
    assert_eq!(pubkey, address.to_string(), "Incorrect pubkey");
    let owner: String = first_row.get("owner");
    assert_eq!(owner, TOKEN_ACCOUNT_OWNER.to_string(), "Incorrect pubkey");
    let mint: String = first_row.get("mint");
    assert_eq!(mint, MINT.to_string(), "Incorrect pubkey");

    client.close().expect("Error disconnecting");
    geyser_plugin.on_unload();
}
