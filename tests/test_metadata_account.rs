use std::thread::sleep;
use std::time::Duration;

use solana_geyser_plugin_interface::geyser_plugin_interface::GeyserPlugin;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfo;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfoVersions;
use solana_geyser_plugin_postgres::geyser_plugin_postgres::GeyserPluginPostgres;
use solana_geyser_plugin_postgres::postgres_client::SimplePostgresClient;
use solana_sdk::pubkey;
use solana_sdk::pubkey::Pubkey;

static OWNER: Pubkey = pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
static MINT: Pubkey = pubkey!("4chf9zcUBsuxAsVc12ZVWXneZne3kFF4Xu9DafEDirHr");
static METADATA_ADDRESS: Pubkey = pubkey!("HYCHvMQYKVB4x7js2swhkSc2VjNcjDabzdKYrswQBLN4");
static FIRST_CREATOR_ADRESS: Pubkey = pubkey!("Hph3MGKor2b2vc8xdsUijnMXM7HmLR9U6DqKt4yuMMF5");
static FIRST_CREATOR_VERIFIED: bool = true;
static SECOND_CREATOR_ADRESS: Pubkey = pubkey!("fSJNUmXo4fGtaadXcFkjefcHCmFv6JLcTyCrJZU8pcq");
static SECOND_CREATOR_VERIFIED: bool = false;
static THIRD_CREATOR_ADRESS: Pubkey = pubkey!("6JAHQ9C7YWtyJhz4rNquEkx91DGPzxyNq9B28m8vumxp");
static THIRD_CREATOR_VERIFIED: bool = false;

#[test]
fn test_metadata_account() {
    let mut geyser_plugin = GeyserPluginPostgres::default();
    geyser_plugin.on_load(concat!(env!("CARGO_MANIFEST_DIR"), "/tests/test_config.json")).unwrap();

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: METADATA_ADDRESS.as_ref(),
                lamports: 561672,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 361,
                data: &[
                    0x04, 0xf9, 0xf2, 0x90, 0x13, 0x39, 0x08, 0x13, 0x96, 0xad, 0x08, 0x80, 0x14, 0x4e, 0x3a, 0x83, 0x19, 0xa6, 0xd7, 0xb8, 0x8c, 0xb2, 0x91, 0xc6, 0xd6, 0xb8, 0x2e, 0x15, 0x00, 0x4f,
                    0x16, 0xbb, 0xa0, 0x35, 0xb8, 0x5c, 0x6f, 0x0d, 0x02, 0xd3, 0x3d, 0x40, 0x7a, 0x0f, 0xc6, 0xd3, 0x27, 0x9a, 0xed, 0x34, 0xf0, 0xf6, 0xd3, 0xc9, 0x18, 0x76, 0x0b, 0x3c, 0xfa, 0x59,
                    0xb9, 0x3e, 0x0c, 0x61, 0xfd, 0x20, 0x00, 0x00, 0x00, 0x4d, 0x69, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x48, 0x65, 0x72, 0x6f, 0x20, 0x23, 0x33, 0x35, 0x39, 0x37, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x4d, 0x49, 0x4e, 0x49, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x45, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x2e, 0x6d, 0x72, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x3f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3d, 0x34, 0x38, 0x32, 0x37, 0x34,
                    0x34, 0x39, 0x32, 0x30, 0x30, 0x26, 0x69, 0x64, 0x3d, 0x35, 0x31, 0x39, 0x32, 0x39, 0x31, 0x39, 0x63, 0x61, 0x31, 0x62, 0x37, 0x34, 0x64, 0x65, 0x61, 0x62, 0x36, 0x31, 0x61, 0x62,
                    0x32, 0x64, 0x30, 0x30, 0x66, 0x62, 0x62, 0x63, 0x30, 0x61, 0x38, 0x26, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3d, 0x42, 0x6f, 0x65, 0x46, 0x69, 0x62, 0x7a, 0x6a, 0x5a, 0x71, 0x55, 0x32,
                    0x62, 0x71, 0x4f, 0x50, 0x65, 0x6e, 0x2d, 0x53, 0x62, 0x72, 0x49, 0x57, 0x6b, 0x4b, 0x66, 0x61, 0x45, 0x61, 0x33, 0x78, 0x67, 0x38, 0x6b, 0x6e, 0x53, 0x4f, 0x4f, 0x63, 0x48, 0x41,
                    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0xf9, 0xf2, 0x90, 0x13,
                    0x39, 0x08, 0x13, 0x96, 0xad, 0x08, 0x80, 0x14, 0x4e, 0x3a, 0x83, 0x19, 0xa6, 0xd7, 0xb8, 0x8c, 0xb2, 0x91, 0xc6, 0xd6, 0xb8, 0x2e, 0x15, 0x00, 0x4f, 0x16, 0xbb, 0xa0, 0x01, 0x00,
                    0x09, 0xd8, 0xad, 0x4d, 0xbe, 0x1e, 0x24, 0xc8, 0x4d, 0x0f, 0xab, 0xe1, 0x2f, 0xc8, 0x65, 0x04, 0x7d, 0x21, 0x4b, 0x0d, 0xc9, 0x1e, 0xc7, 0x8b, 0x25, 0xed, 0x7a, 0x34, 0xf7, 0x3d,
                    0xb5, 0x42, 0x00, 0x64, 0x4e, 0xaf, 0xcd, 0xee, 0x22, 0xdc, 0xbb, 0x25, 0x10, 0xc9, 0x6a, 0x9c, 0x65, 0x95, 0xee, 0xe7, 0x77, 0x2e, 0xbe, 0x83, 0xe2, 0x1b, 0x86, 0x58, 0xc7, 0xed,
                    0xc0, 0xa4, 0xd5, 0x78, 0x3c, 0x25, 0x00, 0x00, 0x01, 0x01, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            false,
        )
        .unwrap();

    sleep(Duration::from_secs(1));

    // check token owner
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query("SELECT * from token_metadata_creators where mint=$1", &[&MINT.to_string()])
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 3, "Incorrect number of rows found (should be 3)");

    // first row
    let mint: String = rows[0].get("mint");
    assert_eq!(mint, MINT.to_string(), "Incorrect mint pubkey");
    let verified: bool = rows[0].get("verified");
    assert_eq!(verified, FIRST_CREATOR_VERIFIED, "Incorrect verified boolean");
    let creator: String = rows[0].get("creator");
    assert_eq!(creator, FIRST_CREATOR_ADRESS.to_string(), "Incorrect creator pubkey");

    // second row
    let mint: String = rows[1].get("mint");
    assert_eq!(mint, MINT.to_string(), "Incorrect mint pubkey");
    let verified: bool = rows[1].get("verified");
    assert_eq!(verified, SECOND_CREATOR_VERIFIED, "Incorrect verified boolean");
    let creator: String = rows[1].get("creator");
    assert_eq!(creator, SECOND_CREATOR_ADRESS.to_string(), "Incorrect creator pubkey");

    // third row
    let mint: String = rows[2].get("mint");
    assert_eq!(mint, MINT.to_string(), "Incorrect mint pubkey");
    let verified: bool = rows[2].get("verified");
    assert_eq!(verified, THIRD_CREATOR_VERIFIED, "Incorrect verified boolean");
    let creator: String = rows[2].get("creator");
    assert_eq!(creator, THIRD_CREATOR_ADRESS.to_string(), "Incorrect creator pubkey");

    client.close().expect("Error disconnecting");
    geyser_plugin.on_unload();
}
