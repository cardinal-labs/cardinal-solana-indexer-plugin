use std::thread::sleep;
use std::time::Duration;

use solana_geyser_plugin_interface::geyser_plugin_interface::GeyserPlugin;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfo;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfoVersions;
use solana_geyser_plugin_postgres::geyser_plugin_postgres::GeyserPluginPostgres;
use solana_geyser_plugin_postgres::postgres_client::SimplePostgresClient;
use solana_sdk::pubkey;
use solana_sdk::pubkey::Pubkey;
use solana_sdk::signature::Keypair;
use solana_sdk::signer::Signer;

static OWNER: Pubkey = pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");

#[test]
fn test_metadata_batch_size() {
    let address_1: Pubkey = Keypair::new().pubkey();
    let mint_1 = "9dtrQEUvH34NjHpRHVWhwJr1n66H38Su3hf5ZWRrjcXA".to_string();
    let address_2: Pubkey = Keypair::new().pubkey();
    let mint_2 = "3wNFkmwq3qqHvyPnm6mcSMGaDnuCEXUjB1obFpbsrT8d".to_string();
    let address_3: Pubkey = Keypair::new().pubkey();
    let mint_3 = "g8UZt9y4dxG6UgRbFsDWoe8SEAei6973E8yNFJUnxZ4".to_string();

    // load plugin
    let mut geyser_plugin = GeyserPluginPostgres::default();
    geyser_plugin.on_load(concat!(env!("CARGO_MANIFEST_DIR"), "/tests/test_config_single_threaded.json")).unwrap();

    // clear these mints from tables
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    client
        .query(
            "DELETE from token_metadata_creators where mint = any(array[$1, $2, $3])",
            &[&mint_1.to_string(), &mint_2.to_string(), &mint_3.to_string()],
        )
        .expect("Error deleting accounts");

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_1.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0x04, 0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99,
                    0xc8, 0xd2, 0xf9, 0x80, 0x51, 0x08, 0x92, 0x22, 0x23, 0xac, 0xdb, 0xd6, 0x0d, 0x79, 0x7e, 0xe4, 0x86, 0x53, 0x56, 0x23, 0xae, 0x92, 0xee, 0x69, 0xea, 0x5b, 0x82, 0x0a, 0x7c, 0x5b,
                    0x11, 0xc2, 0x57, 0xd9, 0xa1, 0x20, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x49, 0x76, 0x6f, 0x72, 0x79, 0x20, 0x23, 0x32, 0x32, 0x32, 0x31,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x52, 0x54, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x72, 0x4e, 0x49, 0x36, 0x61, 0x5a, 0x6e, 0x53, 0x66, 0x61,
                    0x47, 0x6e, 0x66, 0x5a, 0x35, 0x64, 0x6c, 0x6d, 0x79, 0x48, 0x47, 0x39, 0x46, 0x39, 0x46, 0x30, 0x64, 0x67, 0x6f, 0x5f, 0x4d, 0x54, 0x4e, 0x6c, 0x6d, 0x45, 0x64, 0x57, 0x63, 0x43,
                    0x51, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x45, 0xa4, 0xd8, 0x0a,
                    0x42, 0x3b, 0xda, 0xf2, 0x21, 0x40, 0xe9, 0xe2, 0x7b, 0xc7, 0xec, 0x0a, 0xa2, 0xcf, 0xb1, 0xe1, 0x93, 0x0b, 0x2f, 0x71, 0x7f, 0xc9, 0xc2, 0x50, 0x36, 0x88, 0x68, 0x87, 0x01, 0x00,
                    0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99, 0xc8,
                    0xd2, 0xf9, 0x01, 0x00, 0xe8, 0x52, 0xb9, 0xa0, 0xf5, 0x53, 0xfd, 0x63, 0xa7, 0x9c, 0x29, 0x80, 0x96, 0xf5, 0xdb, 0x46, 0xf9, 0x63, 0x04, 0xcc, 0xe2, 0x02, 0x10, 0x99, 0x6f, 0x1e,
                    0xfc, 0x66, 0x24, 0x2c, 0xc1, 0x74, 0x00, 0x64, 0x01, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    // should batch
    sleep(Duration::from_secs(1));
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query(
            "SELECT * from token_metadata_creators where mint = any(array[$1, $2, $3])",
            &[&mint_1.to_string(), &mint_2.to_string(), &mint_3.to_string()],
        )
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 0, "Incorrect number of rows found");

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_2.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0x04, 0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99,
                    0xc8, 0xd2, 0xf9, 0x2b, 0xa4, 0xc5, 0x1c, 0x21, 0x61, 0x4b, 0x62, 0xb0, 0xff, 0x6c, 0x4f, 0x55, 0x93, 0xfe, 0xf5, 0x05, 0xbd, 0xd6, 0x33, 0xab, 0x36, 0xfe, 0x41, 0x89, 0x95, 0x49,
                    0x90, 0x5c, 0x36, 0xdc, 0x2a, 0x20, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x49, 0x76, 0x6f, 0x72, 0x79, 0x20, 0x23, 0x31, 0x38, 0x38, 0x38,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x52, 0x54, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x6a, 0x2d, 0x6d, 0x42, 0x42, 0x6f, 0x6b, 0x5a, 0x73, 0x75, 0x74,
                    0x47, 0x43, 0x65, 0x75, 0x77, 0x55, 0x45, 0x32, 0x65, 0x5f, 0x54, 0x68, 0x47, 0x51, 0x69, 0x6d, 0x55, 0x6f, 0x52, 0x4f, 0x51, 0x63, 0x47, 0x5f, 0x75, 0x50, 0x5f, 0x4a, 0x36, 0x5f,
                    0x67, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x45, 0xa4, 0xd8, 0x0a,
                    0x42, 0x3b, 0xda, 0xf2, 0x21, 0x40, 0xe9, 0xe2, 0x7b, 0xc7, 0xec, 0x0a, 0xa2, 0xcf, 0xb1, 0xe1, 0x93, 0x0b, 0x2f, 0x71, 0x7f, 0xc9, 0xc2, 0x50, 0x36, 0x88, 0x68, 0x87, 0x01, 0x00,
                    0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99, 0xc8,
                    0xd2, 0xf9, 0x01, 0x00, 0xe8, 0x52, 0xb9, 0xa0, 0xf5, 0x53, 0xfd, 0x63, 0xa7, 0x9c, 0x29, 0x80, 0x96, 0xf5, 0xdb, 0x46, 0xf9, 0x63, 0x04, 0xcc, 0xe2, 0x02, 0x10, 0x99, 0x6f, 0x1e,
                    0xfc, 0x66, 0x24, 0x2c, 0xc1, 0x74, 0x00, 0x64, 0x01, 0x01, 0x01, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_3.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0x04, 0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99,
                    0xc8, 0xd2, 0xf9, 0x0a, 0x06, 0x1a, 0x98, 0xc2, 0x8f, 0x1f, 0x2d, 0x33, 0xe1, 0x5d, 0x48, 0x12, 0xaa, 0x99, 0xf8, 0x45, 0x76, 0xa1, 0x6d, 0xd3, 0x12, 0x24, 0xcd, 0x55, 0xc1, 0x9d,
                    0xd2, 0x34, 0xf6, 0x09, 0x57, 0x20, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x49, 0x76, 0x6f, 0x72, 0x79, 0x20, 0x23, 0x33, 0x36, 0x34, 0x38,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x52, 0x54, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x36, 0x51, 0x53, 0x62, 0x6f, 0x38, 0x35, 0x71, 0x4c, 0x68, 0x51,
                    0x48, 0x65, 0x4e, 0x54, 0x54, 0x38, 0x33, 0x6d, 0x66, 0x56, 0x34, 0x65, 0x72, 0x59, 0x5a, 0x45, 0x35, 0x47, 0x69, 0x36, 0x45, 0x45, 0x4c, 0x35, 0x4c, 0x43, 0x34, 0x39, 0x30, 0x33,
                    0x73, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x45, 0xa4, 0xd8, 0x0a,
                    0x42, 0x3b, 0xda, 0xf2, 0x21, 0x40, 0xe9, 0xe2, 0x7b, 0xc7, 0xec, 0x0a, 0xa2, 0xcf, 0xb1, 0xe1, 0x93, 0x0b, 0x2f, 0x71, 0x7f, 0xc9, 0xc2, 0x50, 0x36, 0x88, 0x68, 0x87, 0x01, 0x00,
                    0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99, 0xc8,
                    0xd2, 0xf9, 0x01, 0x00, 0xe8, 0x52, 0xb9, 0xa0, 0xf5, 0x53, 0xfd, 0x63, 0xa7, 0x9c, 0x29, 0x80, 0x96, 0xf5, 0xdb, 0x46, 0xf9, 0x63, 0x04, 0xcc, 0xe2, 0x02, 0x10, 0x99, 0x6f, 0x1e,
                    0xfc, 0x66, 0x24, 0x2c, 0xc1, 0x74, 0x00, 0x64, 0x01, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    // 2 should auto-flush to db 1 in batch
    sleep(Duration::from_secs(1));
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query(
            "SELECT * from token_metadata_creators where mint = any(array[$1, $2, $3])",
            &[&mint_1.to_string(), &mint_2.to_string(), &mint_3.to_string()],
        )
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 6, "Incorrect number of rows found");

    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query("SELECT * from token_metadata_creators where mint = $1", &[&mint_1.to_string()])
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 3, "Incorrect number of rows found");

    client.close().expect("Error disconnecting");
    geyser_plugin.on_unload();
}
