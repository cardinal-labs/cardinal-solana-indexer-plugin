use std::thread::sleep;
use std::time::Duration;

use solana_geyser_plugin_interface::geyser_plugin_interface::GeyserPlugin;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfo;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfoVersions;
use solana_geyser_plugin_postgres::geyser_plugin_postgres::GeyserPluginPostgres;
use solana_geyser_plugin_postgres::postgres_client::SimplePostgresClient;
use solana_sdk::pubkey;
use solana_sdk::pubkey::Pubkey;
use solana_sdk::signature::Keypair;
use solana_sdk::signer::Signer;

static OWNER: Pubkey = pubkey!("EmdsWm9dJ1d6BgQzHDcMJkDvB5SVvpfrAtpiGMVW1gxx");

#[test]
fn test_account_batch_size() {
    let address_1: Pubkey = Keypair::new().pubkey();
    let data = &[
        0xb9, 0x61, 0x7c, 0xe7, 0x46, 0x4b, 0xe4, 0x2f, 0x00, 0xff, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb7, 0xcd, 0xa6, 0x2e, 0xd1, 0x93, 0x4e, 0x14, 0x06, 0xbb, 0xc1, 0x96, 0x43,
        0x60, 0x54, 0x5b, 0xdf, 0x13, 0x35, 0x4d, 0x89, 0x37, 0xdc, 0x43, 0x5c, 0x82, 0x6c, 0xb2, 0x33, 0x15, 0xe7, 0x43, 0x21, 0x30, 0x03, 0x8f, 0x5f, 0xc8, 0x8b, 0x0d, 0xc3, 0xd9, 0x80, 0xe1, 0xcc,
        0x44, 0xa6, 0x75, 0xdd, 0xa1, 0x0e, 0x29, 0x6f, 0x38, 0x8d, 0xfa, 0x2f, 0x2d, 0x18, 0x4a, 0xda, 0x5a, 0xf9, 0x85, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x9f, 0x29, 0xcb,
        0x63, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x98, 0xfc, 0x2b, 0x7d, 0xb7, 0x41, 0x56, 0xb8, 0x55, 0xb6, 0x6d, 0xe2, 0x27, 0x98, 0x32, 0x60, 0x6c, 0xcc, 0xda, 0xc0, 0x19, 0xb9, 0xa8, 0xbb, 0x3a,
        0xba, 0x32, 0x12, 0x01, 0xe3, 0x83, 0x00, 0x00, 0x01, 0xb9, 0xd0, 0x91, 0x2b, 0xbb, 0x9e, 0xf2, 0x3a, 0xab, 0xf2, 0x29, 0x99, 0xac, 0xce, 0xbd, 0x51, 0x4e, 0x7c, 0xe4, 0x61, 0x5f, 0xeb, 0xcf,
        0x41, 0x3e, 0xbf, 0x24, 0x07, 0x0b, 0x81, 0xea, 0xf3, 0x01, 0x00, 0x00, 0x00, 0x24, 0x8d, 0xa2, 0xf4, 0x00, 0xb9, 0xfb, 0xee, 0xac, 0xba, 0x03, 0x4f, 0xc6, 0x19, 0xcb, 0xb1, 0x11, 0x07, 0x18,
        0x47, 0xbf, 0x5e, 0x81, 0x64, 0xe3, 0x8d, 0xee, 0x8f, 0x86, 0x8e, 0x59, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let mut geyser_plugin = GeyserPluginPostgres::default();
    geyser_plugin.on_load(concat!(env!("CARGO_MANIFEST_DIR"), "/tests/test_config_single_threaded_unknown.json")).unwrap();
    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_1.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data,
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    // should batch
    sleep(Duration::from_secs(1));
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client.query("SELECT * from account where pubkey=$1", &[&address_1.as_ref()]).expect("Error selecting accounts");
    assert_eq!(rows.len(), 0, "Incorrect number of rows found");

    let address_2: Pubkey = Keypair::new().pubkey();
    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_2.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data,
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    let address_3: Pubkey = Keypair::new().pubkey();
    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_3.as_ref(),
                lamports: 2790960,
                owner: OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data,
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    // 3 should auto-flush to db
    sleep(Duration::from_secs(1));
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client.query("SELECT * from account where pubkey=$1", &[&address_1.as_ref()]).expect("Error selecting accounts");
    assert_eq!(rows.len(), 1, "Incorrect number of rows found");
    let first_row = rows.first().expect("No results found");

    let pubkey: Vec<u8> = first_row.get("pubkey");
    assert_eq!(Pubkey::new_from_array(pubkey[..].try_into().unwrap()), address_1, "Incorrect pubkey");

    let owner: Vec<u8> = first_row.get("owner");
    assert_eq!(Pubkey::new_from_array(owner[..].try_into().unwrap()), OWNER, "Incorrect pubkey");
    client.close().expect("Error disconnecting");
    geyser_plugin.on_unload();
}
