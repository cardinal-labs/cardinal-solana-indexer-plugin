use std::thread::sleep;
use std::time::Duration;

use solana_geyser_plugin_interface::geyser_plugin_interface::GeyserPlugin;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfo;
use solana_geyser_plugin_interface::geyser_plugin_interface::ReplicaAccountInfoVersions;
use solana_geyser_plugin_postgres::geyser_plugin_postgres::GeyserPluginPostgres;
use solana_geyser_plugin_postgres::postgres_client::SimplePostgresClient;
use solana_sdk::pubkey;
use solana_sdk::pubkey::Pubkey;
use solana_sdk::signature::Keypair;
use solana_sdk::signer::Signer;

static TOKEN_METADATA_OWNER: Pubkey = pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s");
static TOKEN_MANAGER_OWNER: Pubkey = pubkey!("mgr99QFMYByTqGPWmNqunV7vBLmWWXdSrHUfV8Jf3JM");

#[test]
fn test_skip_startup() {
    let address_1: Pubkey = Keypair::new().pubkey();
    let mint_1 = "5grvMeoBqv5ZdHq9JMy5RrxLPNAt1nzc9cpqYWFUwizz".to_string();
    let address_2: Pubkey = Keypair::new().pubkey();

    // load plugin
    let mut geyser_plugin = GeyserPluginPostgres::default();
    geyser_plugin.on_load(concat!(env!("CARGO_MANIFEST_DIR"), "/tests/test_config_skip_startup.json")).unwrap();

    // clear these mints from tables
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    client
        .query("DELETE from token_metadata_creators where mint = any(array[$1])", &[&mint_1.to_string()])
        .expect("Error deleting accounts");

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_1.as_ref(),
                lamports: 2790960,
                owner: TOKEN_METADATA_OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0x04, 0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99,
                    0xc8, 0xd2, 0xf9, 0x80, 0x51, 0x08, 0x92, 0x22, 0x23, 0xac, 0xdb, 0xd6, 0x0d, 0x79, 0x7e, 0xe4, 0x86, 0x53, 0x56, 0x23, 0xae, 0x92, 0xee, 0x69, 0xea, 0x5b, 0x82, 0x0a, 0x7c, 0x5b,
                    0x11, 0xc2, 0x57, 0xd9, 0xa1, 0x20, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x20, 0x7c, 0x20, 0x49, 0x76, 0x6f, 0x72, 0x79, 0x20, 0x23, 0x32, 0x32, 0x32, 0x31,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x52, 0x54, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x68,
                    0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x72, 0x77, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x72, 0x4e, 0x49, 0x36, 0x61, 0x5a, 0x6e, 0x53, 0x66, 0x61,
                    0x47, 0x6e, 0x66, 0x5a, 0x35, 0x64, 0x6c, 0x6d, 0x79, 0x48, 0x47, 0x39, 0x46, 0x39, 0x46, 0x30, 0x64, 0x67, 0x6f, 0x5f, 0x4d, 0x54, 0x4e, 0x6c, 0x6d, 0x45, 0x64, 0x57, 0x63, 0x43,
                    0x51, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x45, 0xa4, 0xd8, 0x0a,
                    0x42, 0x3b, 0xda, 0xf2, 0x21, 0x40, 0xe9, 0xe2, 0x7b, 0xc7, 0xec, 0x0a, 0xa2, 0xcf, 0xb1, 0xe1, 0x93, 0x0b, 0x2f, 0x71, 0x7f, 0xc9, 0xc2, 0x50, 0x36, 0x88, 0x68, 0x87, 0x01, 0x00,
                    0xcc, 0x97, 0x2c, 0xfb, 0xf2, 0xe4, 0xc1, 0xfc, 0xc9, 0x49, 0x4d, 0xe3, 0x0b, 0xd1, 0x90, 0x91, 0xd2, 0x82, 0x5f, 0x48, 0x5a, 0x70, 0xe4, 0x54, 0x0d, 0x68, 0x00, 0x41, 0x99, 0xc8,
                    0xd2, 0xf9, 0x01, 0x00, 0xe8, 0x52, 0xb9, 0xa0, 0xf5, 0x53, 0xfd, 0x63, 0xa7, 0x9c, 0x29, 0x80, 0x96, 0xf5, 0xdb, 0x46, 0xf9, 0x63, 0x04, 0xcc, 0xe2, 0x02, 0x10, 0x99, 0x6f, 0x1e,
                    0xfc, 0x66, 0x24, 0x2c, 0xc1, 0x74, 0x00, 0x64, 0x01, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    geyser_plugin
        .update_account(
            ReplicaAccountInfoVersions::V0_0_1(&ReplicaAccountInfo {
                pubkey: address_2.as_ref(),
                lamports: 2790960,
                owner: TOKEN_MANAGER_OWNER.as_ref(),
                executable: false,
                rent_epoch: 0,
                data: &[
                    0xb9, 0x61, 0x7c, 0xe7, 0x46, 0x4b, 0xe4, 0x2f, 0x00, 0xfd, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3c, 0x9c, 0x21, 0xb2, 0xed, 0xfb, 0x43, 0x04, 0x31, 0x48, 0x67,
                    0x94, 0xef, 0x9a, 0xc3, 0xb6, 0x31, 0x6b, 0x9c, 0x8e, 0xb0, 0x8f, 0x4c, 0x3a, 0x73, 0xc9, 0xc7, 0x83, 0xf3, 0x7d, 0x2d, 0xfd, 0x9c, 0xfc, 0xc6, 0x82, 0xa3, 0x90, 0xd3, 0x57, 0xdc,
                    0x1d, 0xb4, 0xf2, 0x2f, 0xea, 0xed, 0xcc, 0x6c, 0x0f, 0x2e, 0xd4, 0x0f, 0x25, 0x01, 0xef, 0xe0, 0xbc, 0xb4, 0x5c, 0x55, 0xad, 0xa6, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x03, 0x02, 0xe9, 0x88, 0x1f, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb3, 0xf0, 0xed, 0xce, 0x06, 0x59, 0x1b, 0x20, 0xde, 0x51, 0x0d, 0xec, 0x3e, 0xb5, 0xc0, 0xe4, 0x2a, 0xde,
                    0x59, 0xa5, 0x08, 0x23, 0x4b, 0x64, 0x2e, 0xf9, 0xe2, 0x63, 0x01, 0x2b, 0x41, 0x29, 0x00, 0x00, 0x01, 0xf2, 0x79, 0x89, 0x5c, 0xdd, 0xb5, 0x06, 0x28, 0xa2, 0x54, 0xf3, 0xde, 0x87,
                    0x16, 0x3b, 0xb0, 0x25, 0x20, 0x7d, 0xe4, 0xa4, 0x71, 0xec, 0xa6, 0x3e, 0x57, 0xa3, 0x2c, 0xaf, 0x68, 0x6e, 0xde, 0x01, 0x00, 0x00, 0x00, 0xeb, 0x8c, 0x83, 0xcc, 0x74, 0x29, 0xe9,
                    0x0a, 0x86, 0x7e, 0x44, 0xca, 0x8f, 0xa3, 0x81, 0x1a, 0x20, 0x74, 0x05, 0xd0, 0x95, 0xd6, 0x5d, 0x63, 0x57, 0x38, 0x92, 0x58, 0x79, 0x9a, 0x69, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00,
                ],
                write_version: 0,
            }),
            0,
            true,
        )
        .unwrap();

    // end startup
    geyser_plugin.notify_end_of_startup().unwrap();

    // should skip token metadata
    sleep(Duration::from_secs(1));
    let mut client = SimplePostgresClient::connect_to_db(&geyser_plugin.config.clone().expect("No plugin config found")).expect("Failed to connect");
    let rows = client
        .query("SELECT * from token_metadata_creators where mint=$1", &[&mint_1.to_string()])
        .expect("Error selecting accounts");
    assert_eq!(rows.len(), 0, "Incorrect number of rows found");

    // find token manager
    sleep(Duration::from_secs(1));
    let rows = client.query("SELECT * from token_manager where id=$1", &[&address_2.to_string()]).expect("Error selecting accounts");
    assert_eq!(rows.len(), 1, "Incorrect number of rows found (should be 1)");

    client.close().expect("Error disconnecting");
    geyser_plugin.on_unload();
}
